- hosts: [nodes]
  remote_user: duboc_au
  tasks:
  - set_fact: group=ei1720
  - set_fact: ip_remote={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address']  }}
  - name: "get ram"
    shell:  echo $(( 4 * $(free -m | tail -n 2 | head -n 1 | awk '{print $2}') / 5 ))
    register: ram
  - name: "get cpu"
    shell: echo $(( $(lscpu | grep Proces | awk '{print $2}') * $(lscpu | grep Thread | cut -d':' -f2 | awk '{print $1}') ))
    register: cpu
  - set_fact: name=vm{{ ip_remote.split(".")[3] }}.qcow2
  - set_fact: folder=/mci/ei1720/duboc_au/vms
  - set_fact: path=/mci/ei1720/duboc_au/vms/{{ name }}
  - set_fact: ramint={{ ram.stdout | int}}
  - set_fact: cpuint={{ cpu.stdout | int }}
  - debug: var=name
  - debug: var=folder
  - debug: var=path
  - debug: var=ramint
  - debug: var=cpuint
  - name: "launch virtual machine"
    command: >
                    screen -dm bash -c "qemu-system-x86_64 -cpu host -machine type=q35,accel=kvm -m {{ ramint }}
                    -smp {{ cpuint }} -object rng-random,id=rng0,filename=/dev/urandom 
                    -device virtio-rng-pci,rng=rng0 -net nic -net bridge,br=virbr0 
                    -drive file={{ path }},if=ide,index=0,media=disk,format=qcow2 
                    -balloon virtio -nographic; exec /bin/bash"
  - pause:
        seconds: 30
        prompt: "Waiting 30 seconds while the virtual machine is booting"
  - name: "copy scripts on remote host"
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ group }}"
      mode: 0755
    with_items:
      - { src: './scripts/update_ssh_config_vm.sh', dest: '{{ folder }}/update_ssh_config_vm.sh' }
      - { src: './scripts/update_config_vm.sh', dest: '{{ folder }}/update_config_vm.sh' }
      - { src: './scripts/update_vm_for_cluster.sh', dest: '{{ folder }}/update_vm_for_cluster.sh' }
  - set_fact: new_hostname_part=disicoptere{{ ip_remote.split(".")[3] }}
  - name: "choosing a free ip in vmbr120"
    local_action: command ./scripts/new_ip/get_new_ip.sh
    register: output_new_ip
  - set_fact: new_ip={{ output_new_ip.stdout }}
  - name: "completing hostname"
    local_action: command ./scripts/new_hostname/get_hostname.sh {{ ip_remote }}
    register: output_new_hostname
  - set_fact: new_hostname={{ new_hostname_part }}-{{ output_new_hostname.stdout }}
  - debug: var=new_ip
  - debug: var=new_hostname
  - name: "execute scripts to add the new VM in the cluster" 
    command: "bash {{ folder }}/update_vm_for_cluster.sh {{ new_hostname }} {{ new_ip }}"
    ignore_errors: True
  - debug:
      msg:
        - "Well done ! {{ new_hostname }} --> {{ new_ip }} in the cluster !"
